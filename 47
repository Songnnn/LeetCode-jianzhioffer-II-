//没通过，不知道为什么，但方法肯定是对的，我懒得调试了
class Solution {
public:
    int maxValue(vector<vector<int>>& grid) {
        /*
        * 非常典型的动态规划算法
        * 设dp[i][j]是终点为[i,j]时可获得礼物的最大值
        * 先更新dp[0][j]和dp[i][0]，因为从[0,0]出发只能向右或者向下走
        * 随后按行更新dp矩阵即可
        * dp[i][j]=value[i][j]+max(dp[i][j-1],dp[i-1][j])
        */
        int dp[202][202] = { 0 };
        dp[0][0] = grid[0][0];
        //更新dp[0][i]，即第一行
        for (int i = 1; i < grid[0].size(); i++) dp[0][i] = dp[0][i - 1] + grid[0][i];
        //更新dp[i][0]，即第一列
        for (int i = 1; i < grid.size(); i++) dp[i][0] = dp[i - 1][0] + grid[i][0];
        //从dp[1][1]开始按行更新，如果棋盘有这么大的话
        int i, j;
        for (i = 1; i < grid[0].size(); i++) {
            for (j = 1; j < grid.size(); j++) {
                dp[i][j] = grid[i][j] + max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
        return dp[i-1][j-1];
    }
};
