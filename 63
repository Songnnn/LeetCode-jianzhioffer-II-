//解法1，二分法，但是过不了测试，栈溢出了，递归就容易出这种问题
//最大利润为max(前部分的最大利润，后部分的最大利润，后部分最大值-前部分最小值)
class Solution {
public:
    int Max(int a, int b, int c) {
        int x = a > b ? a : b;
        return x > c ? x : c;
    }

    int getMax(int s, int e, vector<int> prices) {
        int max = prices[s];
        for (int i = s; i <= e; i++) {
            if (prices[i] > max) max = prices[i];
        }
        return max;
    }

    int getMin(int s, int e, vector<int> prices) {
        int min = prices[s];
        for (int i = s; i <= e; i++) {
            if (prices[i] < min) min = prices[i];
        }
        return min;
    }

    int getMaxV(int start, int end, vector<int> prices) {
        if (end == start) return 0;
        else if (end == start + 1) {
            int res = prices[end] - prices[start];
            if (res > 0) return res;
            else return 0;
        }
        else {
            return Max(getMaxV(start, (start + end) / 2, prices),
                getMaxV((start + end) / 2 + 1, end, prices),
                getMax((start + end) / 2 + 1, end, prices) - getMin(start, (start + end) / 2, prices)
            );
        }
    }

    int maxProfit(vector<int>& prices) {
        return getMaxV(0, prices.size()-1, prices);
    }
};

//解法2，动态规划法
//设maxV[i]是以V[i]为结尾的数组的最大利润
//maxV[i] = max(maxV[i - 1], V[i] - min(0...i-1));
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (prices.size() == 0 || prices.size() == 1) return 0;
        int maxV[100001] = { 0 };
        int min = prices[0];
        for (int i = 1; i < prices.size(); i++) {
            int v = prices[i] - min;
            if (v > maxV[i - 1]) maxV[i] = v;
            else maxV[i] = maxV[i - 1];
            if (prices[i] < min) min = prices[i];
        }
        return maxV[prices.size()-1];
    }
};
